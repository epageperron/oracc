#!/usr/bin/perl
use warnings; use strict; use open 'utf8'; use utf8;
binmode STDIN, ':utf8'; binmode STDOUT, ':utf8'; binmode STDERR, ':utf8';
use lib "$ENV{'ORACC'}/lib";

my @verbs = qw/align apply build check cull done edit fix help init make ok stash status update/; my %verbs = (); @verbs{@verbs} = ();
my @objects = qw/bases commands culled entries final fixed forms init senses/; my %objects = (); @objects{@objects} = ();

my %commands = (
    align=>\&align,
    apply=>\&apply,
    build=>\&build,
    check=>\&check,
    cull=>\&cull,
    done=>\&done,
    edit=>\&edit,
    fix=>\&fix,
    help=>\&help,
    init=>\&init,
    make=>\&make,
    ok=>\&ok,
    stash=>\&stash,
    status=>\&status,
    update=>\&update,
    );

my %steps = ();
my @steps = (
    "cbd init [LANG]",
    "cbd align entries",
    "cbd ok",
    "cbd apply",
    "cbd edit",
    "cbd stash",
    "cbd align senses",
    "cbd ok",
    "cbd apply",
    "cbd edit",
    "cbd stash",
    "cbd fix",
    "cbd stash",
    "cbd cull forms",
    "cbd cull bases",
    "cbd stash",
    "cbd align bases",
    "cbd ok",
    "cbd stash",
    "cbd merge",
    "cbd done",    
    );
@steps{@steps} = ();

my %help = (
    commands=>\&help_commands,
    );

my @stash = qw/init entries senses fixed culled bases final/;
my %stash = (
    init=>\&stash_init,
    );

use constant { NO=>0, YES=>1, MAYBE=>2 };
sub cbd_die;
sub cbd_next;
sub cbd_warn;
sub xsystem;

my %argcheck = ();
args_config('align', NO, qw/init bases entries senses/);
args_config('apply', NO);
args_config('build', NO);
args_config('check', MAYBE);
args_config('cull', NO, qw/forms bases/);
args_config('done', NO);
args_config('edit', NO);
args_config('fix', NO);
args_config('help', NO, @verbs, 'commands');
args_config('init', YES);
args_config('make', NO);
args_config('ok', NO);
args_config('stash', MAYBE, 'help', @stash);
args_config('status', NO);
args_config('update', NO);
args_sanity();

################################################################################################

my $verb = '';
my $object = '';
my $lang = '';
my $equals_object = '';
my $needok = 0;
my $nohelp = 0;
my $nonext = 0;
my $phase = '';
my $verbose = 1;

args_process();

$verb = 'help' unless $verb;

unless ($verb eq 'help' || $verb eq 'init') {
    $lang =  `cbdstash.plx status '#current'`;
    $phase = `cbdstash.plx status $lang`;
}

&{$commands{$verb}}($object, $lang);

#################################################################################################

sub align {
    cbd_object() unless $object;
    if ($lang) {
	my $nxt = '';

	if ($object eq 'bases') {
	    $nxt=" and/or 'base-check.log'";
	}
	
	xsystem "cbdalign${object}.plx", '-log', "$object.log", "00lib/$lang.glo";
	++$needok;
	cbd_next("Review '$object.log'$nxt; adjust 00lib/$lang.glo; repeat cbd align $object as necessary",
		 ($object eq 'senses' ? "-To see the senses most likely to need fixing say: grep '\\[[34]\\]' senses.log" : ''),
		 "cbd apply");
    } else {
	++$nohelp; cbd_die("cbd align $object failed. Stop");
    }
}

sub apply {
    if ($phase eq 'init') {
	$object = 'entries';
    } elsif ($phase eq 'entries') {
	$object = 'senses';
#    } elsif ($phase eq 'senses') {
#	$object = 'bases';
    } elsif ($phase eq 'culled') {
	$object = 'bases';
    } else {
	cbd_die "cbd apply only works when current phase is 'init', 'entries', or 'senses', not '$phase'";
    }

    cbd_test_ok();

    xsystem "cbdalign${object}.plx", '-apply', "00lib/$lang.glo";
    if ($object eq 'bases') {
	cbd_next("cbd stash");
    } else {
	cbd_next("cbd edit");
    }
}

sub args_check {
    return unless $verb;
    if (defined $argcheck{$verb}) {
	if ($object) {
	    return cbd_warn "command $verb doesn't take object $object"
		unless exists ${$argcheck{$verb}}{$object};
	}
    } elsif ($object) {
	return cbd_warn "command $verb doesn't take an object";
    }
    if (defined $argcheck{$verb,'lang'}) {
	if ($lang) {
	    return cbd_warn "command $verb is not allowed to have a language argument"
		unless $argcheck{$verb,'lang'} == YES;
	} else {
	    return cbd_warn "command $verb must have a language argument"
		if $argcheck{$verb,'lang'} == YES;
	}
    } else {
	cbd_die "internal error: argument $verb has no lang info";
    }
    return 0;
}

sub args_config {
    my($vb,$lng,@ok) = @_;
    $argcheck{$vb,'lang'} = $lng;
    @{$argcheck{$vb}}{@ok} = ();
}

sub args_process {
    foreach my $a (@ARGV) {
	if ($a eq '.') {
	    my $d = `cbdstash.plx dir`;
	    if ($d) {
		my @n = ();
		if (-r "$d/next") {
		    @n = `cat $d/next`; chomp @n;
		}
		if ($n[0]) {
		    ++$nonext; cbd_next(@n);
		} else {
		    die "$0: no alignment in process; use cbd init [LANG] to begin alignment\n";		    
		}
	    } else {
		die "$0: no alignment in process; use cbd init [LANG] to begin alignment\n";		    
	    }
	} elsif ($a eq '-') {
	    my $d = `cbdstash.plx dir`;
	    if ($d) {
		my @n = ();
		if (-r "$d/next") {
		    @n = `cat $d/next`; chomp @n;
		}
		die "$0: failed to exec @n\n"
		    unless exec @n;
	    } else {
		die "$0: no next command; use cbd init [LANG] to begin alignment\n";
	    }
	} elsif ($a eq '=') {
	    my $d = `cbdstash.plx dir`;
	    my @n = ();
	    if ($d) {
		if (-r "$d/next") {
		    @n = `cat $d/next`; chomp @n;
		    $phase = `cbdstash.plx status $lang`;
		    cbd_object();
		    $object = $equals_object if $equals_object; # we want to trigger >>> after equals_object
		} else {
		    $n[0] = "$steps[0]" unless $n[0];
		    $object = '';
		}
	    } else {
		@n = ('cbd init');
		print("$0: no alignment in progress\n");
	    }
	    my $found_object = 0;
	    print "\n";
	    foreach my $s (@steps) {
		++$found_object if $s =~ /$object/;
		if ($found_object && $s =~ /^$n[0]/) {
		    print ">>>\t$s\n";
		    $found_object = 0;
		} else {
		    print "\t$s\n";
		}
	    }
	    print "\n";
	    exit 0;
	} else {
	    if (exists $verbs{$a} && !$verb) {
		$verb = $a;
	    } elsif (exists $objects{$a} && !$object) {
		$object = $a;
	    } elsif ($a =~ /^[a-z]{3}(?:-x-[a-z]{6})?$/ && !$lang) {
		$lang = $a;
	    } else {
		cbd_die("unknown argument '$a'");
	    }
	}
    }
    cbd_die "Exiting because arguments are incorrect."
	if args_check($verb, $object, $lang);
}

sub args_sanity {
    my @not = ();
    foreach my $v (@verbs) {
	push(@not, $v) unless $argcheck{$v};
    }
    if ($#not >= 0) {
	cbd_die "internal error: no arg info for @not";
    }
}

sub build {
    xsystem 'makemake.plx';
    xsystem 'make', '-rR', '-f', '00lib/Makefile';
}

sub cbd_die {
    warn "$0: ", @_, "\n";
    help($verb) unless $nohelp;
    exit 1;
}

sub cbd_next {
    if ($#_ >= 0) {
        foreach (@_) {
	    next unless length;
	    if (/^-/) {
		my $t = $_; $t =~ s/^-/\t/;
		warn "\n$t\n\n";
	    } else {
		warn "\nNext step:\n\n\t$_\n\n";
	    }
	    if (!$nonext && exists $steps{$_}) {
		my $d = `cbdstash.plx dir`;
		system "echo $_ >$d/next";
	    }
	}
    } else {
	my $d = `cbdstash.plx dir`;
	my @n = ();
	if (-r "$d/next") {
	    @n = `cat $d/next`; chomp @n;
	}
	if ($#n >= 0) {
	    cbd_next(@n);
	}
    }
    cbd_needs_ok() if $needok;
    exit 0;
}

sub cbd_needs_ok {
    my $d = `cbdstash.plx dir`;
    xsystem 'touch', "$d/needs_ok";
}

sub cbd_object {
    if ($phase eq 'init') {
	$object = 'entries';
    } elsif ($phase eq 'entries') {
	$object = 'senses';
    } elsif ($phase eq 'senses') {
	$object = 'fixed';
    } elsif ($phase eq 'fixed') {
	$equals_object = 'fix';
	$object = 'culled';
    } elsif ($phase eq 'culled') {
	$object = 'bases';
    } else {
	cbd_die("I can't figure out the object type when phase = '$phase'");
    }
}

sub cbd_test_ok {
    my $d = `cbdstash.plx dir`;
    if (-r "$d/needs_ok") {
	warn "$0: please do `cbd ok' to confirm you have reviewed the $phase log before proceeding\n";
	cbd_next();
    }
}

sub cbd_warn {
    warn "$0: ", @_, "\n";
    return 1;
}

sub check {
    my $internal = shift @_;
    xsystem 'o2-atfsources.plx';
    xsystem 'ox', '-cvm', '-I01bld/atfsources.lst', '-lox.log';
    if ($?) {
	if ($internal) {
	    return 1;
	} else {
	    cbd_warn "errors in ATF checking, see ox.log.";
	    exit 1;
	}
    }
    my @glo = <00lib/*.glo>;
    foreach my $g (@glo) {
	my $log = $g; $log =~ s#^00lib/##; $log =~ s/\./-/; $log .= '.log';
	xsystem 'cbdpp.plx', '-check', '-log', $log, $g;
	if ($?) {
	    if ($internal) {
		return 1;
	    } else {
		cbd_warn "errors checking $g, see $log.";
		exit 1;
	    }
	}
    }
    return 0;
}

sub cull {
    if ($phase eq 'fixed') {
	if ($object eq 'bases') {
	    if (-r "$lang-culled-forms.glo") {
		## do the cbd cull bases operation
		xsystem "bases-cull-zero.plx $lang-culled-forms.glo >$lang-culled-bases.glo";
		if ($?) {
		    ++$nohelp; cbd_die("cbd cull bases failed. Stop");
		}
		cbd_next("cbd stash");
	    } else {
		cbd_die "you must do cbd cull forms before cbd cull bases";
	    }
	} else {
	    xsystem "forms-cull-zero.plx 00lib/$lang.glo >$lang-culled-forms.glo";
	    if ($?) {
		++$nohelp; cbd_die("cbd cull forms failed. Stop");
	    }
	    cbd_next("cbd cull bases");
	}
    } else {
	cbd_die "cull can only be done when phase=fixed, not when phase=$phase";
    }
}

sub done {
    exec 'cbdstash.plx', 'done';
}

sub edit {
    my $next = '';
    if ($phase eq 'init') {
	$object = 'entries';
	$next = 'cbd stash';
    } elsif ($phase eq 'entries') {
	$object = 'senses';
	$next = 'cbd stash';
    } else {
	cbd_die "cbd edit only works when current phase is 'init' or 'entries', not '$object'";
    }
    xsystem 'cbdedit.plx', "$lang-$object-aligned.glo";
    if ($?) {
	++$nohelp; cbd_die("cbd edit $object failed. Stop");
    } else {
	cbd_next($next);
    }
}

sub fix {
    if ($phase eq 'senses') {
	xsystem 'make', '-qrR', '-f', '00lib/Makefile', "02pub/lemm-$lang.sig";
	if ($?) {
	    ++$nohelp; cbd_die "please do oracc update before cbd fix";
	} else {
	    xsystem 'make', '-f', '00lib/Makefile';
	    xsystem 'inst-fix-tab.plx';
	    if ($?) {
		warn "? = $?\n";
		if (($?>>8) == 2) {
		    cbd_warn "no corpus fixes identified in this cbd fix operation";
		    cbd_next "cbd stash";
		} else {
		    cbd_die "inst-fix-tab.plx failed";
		}
	    } else {
		## create the fix tab
		## apply the fix tab
		## next=check the corpus and fix it manually until it's aligned w glossaries
		## next-next=cbd stash fixed
		## cbd_next "cbd stash";
	    }
	}
	
    } else {
	cbd_die "you must do cbd stash senses before cbd fix";
    }
}

sub help {
    my $h = shift @_;
    if ($h) {
	if (exists $help{$h}) {
	    &{$help{$h}};
	    exit 1;
	} else {
	    help();
	    exit 1;
	}
    } else {
	print <<EOF;

cbd helps you work with Corpus-Based Dictionaries (.glo files).  It
provides a unified, simple interface to a collection of CBD programs
and functions, and helps you know which steps to take next when
aligning and correcting glossaries and corpora.  For more help try:

	cbd help commands

EOF
    }
}

sub help_commands {
    print <<EOF;

cbd understands the following commands:

	align:	carry out cbd alignment tasks
	check:	check glossaries
	help: 	print help on cbd commands
    	stash:	stash data while working on alignment
	update:	update the glossary

Try:

	cbd help align|check|stash|update

for more information.

To see next operation:\tcbd .

To see progress:\tcbd =

To run next command:\tcbd -

EOF

}

sub help_stash {
    print <<EOF;

cbd stash is an interface for the program cbdstash.plx.  The following commands are available:

	cbd stash help
	cbd stash init LANG
	cbd stash entries
	cbd stash senses
	cbd stash fixed
	cbd stash done

Try:

	cbdstash.plx help

for more information.

EOF
}

sub init {
    stash_init();
}

sub make {
    xsystem 'makemake.plx';
}

sub ok {
    my $d = `cbdstash.plx dir`;
    xsystem 'rm', '-f', "$d/needs_ok";
    
}

sub stash {
    my $a = shift @_;
    $a = cbd_object() unless $a;
    if ($a) {
	if (exists $stash{$a}) {
	    &{$stash{$a}};
	    exit 1;
	} else {
	    xsystem 'cbdstash.plx', $a;
	    my $next;
	    for (my $i = 0; $i <= $#stash; ++$i) {
		if ($stash[$i] eq $a) {
		    $next = $stash[$i+1];
		    last;
		}
	    }
	    if ($next eq 'final') {
		cbd_next("cbd done");
	    } elsif ($a eq 'fixed') {
		cbd_next("cbd cull forms");
	    } elsif ($next eq 'fixed') {
		cbd_next("cbd fix"); # if the next stash is 'fixed' we need 'cbd fix' to happen first
	    } else {
		cbd_next("cbd align $next");
	    }
	}
    } else {
	help_stash();
    }
}

sub stash_init {
    cbd_die "must give language with cbd stash init"
	unless $lang;
    cbd_die "no glossary 00lib/$lang.glo"
	unless -r "00lib/$lang.glo";
    cbd_die "project must check clean before init"
	if check(1);
    xsystem 'makemake.plx';
    xsystem 'make', '-qrR', '-f', '00lib/Makefile';
    if ($?) {
	++$nohelp; cbd_die "project needs rebuilding before init";
    }
    xsystem 'cbdstash.plx', 'init', $lang;
    cbd_next("cbd align entries");
}

sub status {
    exec 'cbdstash.plx', 'status';
}

sub update {
    xsystem 'oracc', 'update';
}

sub xsystem {
    warn "@_\n" if $verbose;
    system @_;
}

1;
